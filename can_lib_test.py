import ctypes
from ctypes import c_char_p, c_int, c_void_p,c_ubyte, POINTER
from ctypes import util
import os
from cffi import FFI
import struct
import numpy as np
import threading
import paramiko
import logging

import datetime
import time
import struct

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("my_logger")
logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–µ—Ä–∞

# –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
console_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ ERROR –∏ CRITICAL)
file_handler = logging.FileHandler("errors.log", mode='a')
file_handler.setLevel(logging.ERROR)  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ñ–∞–π–ª–∞ ‚Äî —Ç–æ–ª—å–∫–æ ERROR –∏ CRITICAL
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(console_handler)
logger.addHandler(file_handler)


TYPES_MAP = {
    'uint8':('B',1),
    'uint16': ('H',2),
    'uint32': ('I',4),
    'uint64': ('Q',8),
    'float32': ('f',4),
    'float64': ('d',8),
}

CALLBACK_FUNC = ctypes.CFUNCTYPE(None,POINTER(c_ubyte))

# –∑–∞–≥—Ä—É–∂–∞–µ–º dll
def load_dll(name_dll: str) -> int:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç DLL –±–∏–±–ª–∏–æ—Ç–µ–∫—É.

    @param name_dll: –ü—É—Ç—å –∫ DLL —Ñ–∞–π–ª—É.
    @return: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏ (-1 - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, -2 - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π, 1 - —É—Å–ø–µ—à–Ω–æ).
    """
    dll_path = None
    dll_path_lib = None

    #–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dll –Ω–∞ –º–µ—Å—Ç–µ
    dll_path = os.path.abspath(name_dll)
    if dll_path:
        dll_path_lib = util.find_library(dll_path)
    else:
        logger.error("DLL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return -1
    if dll_path_lib:
        #–ü–æ–¥–≥—Ä—É–∂–∞–µ–º dll —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ FFI —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ –ø–æ—Ç–æ–∫–∞–º–∏
        ffi = FFI()
        ffiobj = ffi.dlopen(dll_path)
        dll = ctypes.cdll.LoadLibrary(dll_path_lib)
        if load_functions(dll) == 1:
            return dll
        else:
            return -2
    else:
        logger.error("DLL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        return -1

def load_functions(dll : ctypes.CDLL) -> int:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ DLL.

    @param dll: –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π DLL –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
    @return: 1, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, -1 –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ ctypes.CDLL.
    """

    if isinstance(dll,ctypes.CDLL):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–æ–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        dll.CreateWorker.restype = POINTER(c_void_p)

        dll.DestroyWorker.argtypes = [POINTER(c_void_p)]

        dll.CreateSocket.argtypes = [POINTER(c_void_p)]
        dll.CreateSocket.restype = c_int

        dll.ConnectToUDPServer.argtypes = [POINTER(c_void_p), c_char_p, c_int]
        dll.ConnectToUDPServer.restype = c_int

        dll.WriteSDO.argtypes = [POINTER(c_void_p), c_int, c_int, c_int, POINTER(c_ubyte), c_int, c_int]
        dll.WriteSDO.restype = c_int

        dll.ReadSDO.argtypes = [POINTER(c_void_p), c_int, c_int, c_int, POINTER(c_ubyte), c_int]
        dll.ReadSDO.restype = c_int

        dll.WritePDO.argtypes = [POINTER(c_void_p), c_int, c_int, POINTER(c_ubyte), c_int]
        dll.WritePDO.restype = c_int

        dll.Start_heartbeat.argtypes = [POINTER(c_void_p), c_int]
        dll.Start_heartbeat.restype = c_int

        dll.Stop_heartbeat.argtypes = [POINTER(c_void_p)]
        dll.Stop_heartbeat.restype = c_int

        
        dll.RegisterCallback_pdo.argtypes = [POINTER(c_void_p), CALLBACK_FUNC]

        dll.RegisterCallback_error.argtypes = [POINTER(c_void_p), CALLBACK_FUNC]

        dll.Disconnect.argtypes = [POINTER(c_void_p)]
        dll.Disconnect.restype = c_int
        return 1
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ load_dll")
        return -1




def number_to_bytes(value: {int|float}, dtype: str) -> tuple[int, bytearray]:
    if dtype not in TYPES_MAP: return -1, b''
    fmt, size = TYPES_MAP[dtype]
    try:
        raw_bytes = struct.pack(fmt, value)
        if len(raw_bytes) < size:
            return 1, raw_bytes.ljust(size, b'\x00')  # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ —Å–ø—Ä–∞–≤–∞
        else:
            return 1, raw_bytes
    except struct.error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞: {e}")
        return -2, b''


def is_convertible_to_float32(value : float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∏–ø float32.

    @param value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    @return: True, –µ—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ False.
    """

    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float32
        np.float32(value)
        return True
    except (OverflowError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Ç–∏–ø–∞ float: {e}")
        return False

class CanWorker():
    def __init__(self, dll: ctypes.CDLL, pdo_objects: dict, ssh_ip: str, ssh_port: int=22, usr: str='root', psw: str='1'):
        """
            –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CAN-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ DLL –±–∏–±–ª–∏–æ—Ç–µ–∫—É.

            @param dll: –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π DLL.
            @param pdo_objects: –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º PDO (Process Data Object).
            @param pdo_buffer: –ë—É—Ñ–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDO.
            @param ssh_ip: IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ SSH.
            @param ssh_port: –ü–æ—Ä—Ç –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
            @param usr: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è SSH.
            @param psw: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è SSH.
        """
        
        self.dll = dll
        self.worker_instance = self.dll.CreateWorker() # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Worker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–æ–º
        self.isConnected = False # —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        self.pdo_objects = pdo_objects # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ–∂–∏–¥–∞–µ–º—ã–µ PDO 
        self.pdo_cobids=pps.keys() # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ cobid 

        self.__ip = ssh_ip
        self.___port = ssh_port
        self.__usr = usr
        self.__psw = psw

        self.callback_func = None
        self.callback_func_error = None

    def __del__(self):
        """
        –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä, —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Worker –≤ dll –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.
        """
        self.dll.DestroyWorker(self.worker_instance)

    def __sshconnect(self, port: int) -> int:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ socat –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è nftables.

        @param port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ SSH.
        @return: 1 –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """

        self.__shhclient=paramiko.SSHClient()
        self.__shhclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ü–õ–ö –ø–æ ssh –Ω–∞ –ø–æ—Ä—Ç {port}")
            
            self.__shhclient.connect(hostname=self.__ip, username=self.__usr, password=self.__psw, port=self.___port)
            #if self.__check_socat('nftables') < 0:
            logger.info(f"–û—Ç–∫–ª—é—á–∞–µ–º nftables")
            stdin, stdout, stderr = self.__shhclient.exec_command('systemctl stop nftables') # ü•Çü•Ç —Ä—É–±–∏–º —Å–µ—Ç–µ–≤–æ–π —ç–∫—Ä–∞–Ω –Ω–∞—Ö–æ–π –æ–Ω –Ω–∞–º –Ω–µ –Ω—É–∂–æ–Ω ü•Çü•Ç
            time.sleep(2)
            if self.__check_socat('socat') < 0:
                logger.info(f"–í–∫–ª—é—á–∞–µ–º socat")
                stdin, stdout, stderr = self.__shhclient.exec_command(f'socat INTERFACE:can0,pf=29,type=3,prototype=1 UDP-LISTEN:{port},fork')  # ü•Çü•Ç –∑–∞–ø—É—Å–∫–∞–µ–º socat can->UDP ü•Çü•Ç
            self.__shhclient.close()
            time.sleep(3)
            return 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ü–õ–ö –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: \n{e}")
            return -1

    def __check_socat(self, port) -> int:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ socat –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
        """
        try:
            stdin, stdout, stderr = self.__shhclient.exec_command(f'ps -ef|grep socat |grep {port}')
            if 'socat INTERFACE:can0,pf=29,type=3,prototype=1 UDP-LISTEN' in str(stdout.read()).split('        ')[1]:
                return 1
            else:
                return -1
        except Exception as e:
            print(e)
            return -2


    def connect(self, ip_address: str, port: int) -> int:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å nftables –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å socat.

        @param ip_address: IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        @param port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        @return: 1 –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """

        count = 0
        max_count = 3
        while count<= max_count:
            # –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å udp –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {count + 1} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–õ–ö")
            if self.connect_to_udp_server(ip_address, port)>0:
                logger.info("–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ü–õ–ö")
                return 1
            else:
                # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä—É–±–∏—Ç—å nftables –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–∫–∞—Ç
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ü–õ–ö, –ø–æ–ø—ã—Ç–∫–∞ {count + 1} –∏–∑ {max_count}")
                if self.__sshconnect(port)<0:
                    return -1
            count+=1
        else:
            return -1

    def connect_to_udp_server(self, ip_address: str, port: int) -> int:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UDP —Å–µ—Ä–≤–µ—Ä—É.

        @param ip_address: IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.
        @param port: –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞.
        @return: 1 –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, -2 –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.
        """

        if self.isConnected: return -2

        if (self.dll.CreateSocket(self.worker_instance) > 0):
            res = self.dll.ConnectToUDPServer(self.worker_instance, ip_address.encode('utf-8'), port)
            if res > 0:
                self.isConnected = True
            return res
        else:
            return -1

    def WriteSDO(self,node_id: int, index: int, sub_index: int, data:int | float, data_type: str, timeout_ms: int) -> int:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç SDO (Service Data Object).

        @param node_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∑–ª–∞.
        @param index: –ò–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞.
        @param sub_index: –ü–æ–¥–∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞.
        @param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ).
        @param data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö ('uint8', 'uint16', 'uint32', 'float32').
        @param timeout_ms: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
        @return: –ö–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (1 - —É—Å–ø–µ—à–Ω–æ -1 - –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã -2 - –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ -4 –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, -5 - –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ —Ç–∏–ø)
        """
        if not self.isConnected: return -2
        packaging_error = False
        match data_type:
            case 'uint8':
                if data <= 0xFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                    data_send = (c_ubyte * 1)(*data.to_bytes(1, byteorder='little'))
                    data_size = 1
                else:
                    packaging_error = True
            case 'uint16':
                if data <= 0xFFFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                    data_send = (c_ubyte * 2)(*data.to_bytes(2, byteorder='little'))
                    data_size = 2
                else:
                    packaging_error = True
            case 'uint32':
                if data <= 0xFFFFFFFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                    data_send = (c_ubyte * 4)(*data.to_bytes(4, byteorder='little'))
                    data_size = 4
                else:
                    packaging_error = True
            case 'float32': 
                if is_convertible_to_float32(data): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                    data_send=bytearray(struct.pack("f", data))
                    data_size = 4
                else:
                    packaging_error = True
                
        if packaging_error:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–∫–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ:{data} —Ç–∏–ø:{data_type}")
        write_result = self.dll.WriteSDO(self.worker_instance, node_id, index, sub_index, data_send, data_size, timeout_ms)
        return write_result
    
    def ReadSDO(self, node_id: int, index: int, sub_index: int, timeout_ms: int) -> int | float:
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ SDO.

        @param node_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∑–ª–∞.
        @param index: –ò–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞.
        @param sub_index: –ü–æ–¥–∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞.
        @param timeout_ms: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
        @return: –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏.
        """

        if not self.isConnected: return -2

        buffer = (c_ubyte * 5)()
        read_result = self.dll.ReadSDO(self.worker_instance, node_id, index, sub_index, buffer, timeout_ms)
        if read_result > 0:
            len_data = (buffer[0] ^ 0x43)>>2
            return int.from_bytes(buffer[1:len_data+1], "little")

        else:
            return read_result

    def WritePDO(self, node_id: int, number_pdo: int, pdo_data: c_ubyte):
        """
        –ó–∞–ø–∏—Å—å PDO –ø–∞–∫–µ—Ç–∞ –≤ —à–∏–Ω—É
        """
        if not self.isConnected: return -2

        data_size=len(pdo_data)
        res = dll.WritePDO(self.worker_instance, node_id, number_pdo, pdo_data, data_size)
        return res

    def Stop_ReadPDO(self,th : threading.Thread) -> int:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á—Ç–µ–Ω–∏—è PDO.

        @param th: –ü–æ—Ç–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
        """
        self.dll.Stop_ReadPDO(self.worker_instance)
        if th.is_alive():
            logger.info("–ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è PDO –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            th.join()
        else:
            logger.warning("–ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è PDO –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return -1

    def parse_pdo(self, data: c_ubyte): # ü•Çü•Ç —á—Ç–µ–Ω–∏–µ pdo ü•Çü•Ç
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PDO.

        @param data: –î–∞–Ω–Ω—ã–µ –∏–∑ PDO (cobid –∏ payload).
        @return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –Ω–æ–º–µ—Ä–∞ —É–∑–ª–∞, COBID –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        """
        if data[0] != 0:
            bytes_v=0 #ü•Çü•Ç –∫–∞–∫–∏–µ –±–∞–π—Ç—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ ü•Çü•Ç
            params=[]
            cobid = int.from_bytes(data[0:2], "little") # –≤—ã—á–∏—Å–ª—è–µ–º cobid
            number_pdo = cobid & 0x780 # —Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–æ–π  –Ω–æ–º–µ—Ä PDO
            node=cobid - number_pdo
            if cobid in self.pdo_cobids:
                if data[2]==int(sum(self.pdo_objects[cobid]['mapping'])/8):
                    values=data[3:]
                    for i,l in enumerate(self.pdo_objects[cobid]['mapping']): # ü•Çü•Ç i-–Ω–æ–º–µ—Ä —á–∞–Ω–∫–∞ l-–¥–ª–∏–Ω–∞ —á–∞–Ω–∫–∞ ü•Çü•Ç
                        count=int(l/8)
                        a = self.pdo_objects[cobid]['data_types']
                        type_ch=self.pdo_objects[cobid]['data_types'][i]

                        match type_ch:
                            case 'uint8':
                                params.append(values[bytes_v])
                            case 'uint16':
                                params.append(int.from_bytes(values[bytes_v:bytes_v+count], "little", signed=False))
                            case 'uint32': 
                                params.append(int.from_bytes(values[bytes_v:bytes_v+count], "little", signed=False))
                            case 'float32':
                                params.append(struct.unpack('<f',bytes(values[bytes_v:bytes_v+count]))[0])
                        bytes_v+=count
                else:
                    logger.error(f"–æ—à–∏–±–∫–∞ –≤ –¥–ª–∏–Ω–Ω–µ –ø–∞–∫–µ—Ç–∞ –æ–∂–∏–¥–∞–ª–æ—Å—å {int(sum(self.pdo_objects[cobid]['mapping'])/8)} –ø—Ä–∏—à–ª–æ {data[2]}")
                return node, hex(number_pdo), params
            else:
                logger.debug(f"PDO node:{node} number:{hex(number_pdo)} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
          
    def packing_pdo(self, mapping:dict, data: list) -> tuple[int,c_ubyte]:
        """
        –£–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PDO.
        @param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏.
        @return: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDO.
        """
        if not len(data) == len(mapping['data_types']):  return -1,(c_ubyte * 8)()
        payload=b''
        target_len = 0
        packing_error = False
        for n,value in enumerate(data):
            type_value = mapping['data_types'][n]
            #res ,value = number_to_bytes(value,type_value)
            match type_value:
                case 'uint8':
                    if value <= 0xFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                        data_send = (c_ubyte * 1)(*value.to_bytes(1, byteorder='little'))
                    else:
                        return -3,(c_ubyte * 8)()
                case 'uint16':
                    if value <= 0xFFFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                        data_send = (c_ubyte * 2)(*value.to_bytes(2, byteorder='little'))
                    else:
                        return -3,(c_ubyte * 8)()
                case 'uint32':
                    if value <= 0xFFFFFFFF: # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                        data_send = (c_ubyte * 4)(*value.to_bytes(4, byteorder='little'))
                    else:
                        return -3,(c_ubyte * 8)()
                case 'float32': 
                    if is_convertible_to_float32(value): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ 
                        data_send=(c_ubyte * 4)(bytearray(struct.pack("f", value)))
                    else:
                        return -3,(c_ubyte * 8)()
            if packing_error:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ø–∞–æ–∫–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PDO –ø–∞–∫–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ {value} —Ç–∏–ø {type_value}")
                return -3,(c_ubyte * 8)()
            target_len += TYPES_MAP[type_value][1]
            payload+=data_send
        logger.debug(f"Payload DPO {payload}")
        if len(payload) == target_len:
            return 1,(c_ubyte * 8)(*(payload))
        else:
            return -2,(c_ubyte * 8)()


    def get_pdo(self, pdo):
        length = 11
        pointer_to_array = ctypes.cast(pdo, ctypes.POINTER(ctypes.c_ubyte))
        data = (ctypes.c_ubyte * length).from_address(ctypes.addressof(pointer_to_array.contents))
        res=a.parse_pdo(data)
        if res:
            print(res)

    def get_error(self,erorr):
        length = 10
        pointer_to_array = ctypes.cast(erorr, ctypes.POINTER(ctypes.c_ubyte))
        data = bytearray(pointer_to_array[i] for i in range(length))
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∏–Ω–µ {data}")

    def register_callbac_pdo(self,func):
        dll.RegisterCallback_pdo(self.worker_instance,func)

    def register_callbac_error(self,func):
        dll.RegisterCallback_error(self.worker_instance,func)

    def Start_heartbeat(self, period_ms:int):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–¥–∞—á—É hearbeat
        """
        if not self.isConnected: return -2
        
        res=self.dll.Start_heartbeat(self.worker_instance, period_ms)
        return res
    
    def Stop_heartbeat(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–¥–∞—á—É hearbeat
        """
        if not self.isConnected: return -2
        
        res=self.dll.Stop_heartbeat(self.worker_instance)
        return res
    def Disconnect(self):
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞–≤–∏—Ç  —Ñ–ª–∞–≥ isConnected –≤ False..
        """
        if not self.isConnected: return -2

        self.dll.Disconnect(self.worker_instance)
        self.isConnected = False
    
    def DestroyWorker(self):
        """
        –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Worker –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
        """
        self.dll.DestroyWorker(self.worker_instance)
    
pps={#0x18C:{'mapping':[8,8,8,8,32],'data_types':['uint8','uint8','uint8','uint8','float32']},
     #0x181:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     #0x281:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x195:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x295:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x395:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x495:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x18B:{'mapping':[16,8,16],'data_types':['uint16','uint8','uint16']},
     0x28B:{'mapping':[8,8,8,8],'data_types':['uint8','uint8','uint8','uint8']},
     0x18D:{'mapping':[16,8,16],'data_types':['uint16','uint8','uint16']},
     0x28D:{'mapping':[8,8,8,8],'data_types':['uint8','uint8','uint8','uint8']},
     0x18E:{'mapping':[16,8,16],'data_types':['uint16','uint8','uint16']},
     0x28E:{'mapping':[8,8,8,8],'data_types':['uint8','uint8','uint8','uint8']},
     0x391:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x491:{'mapping':[16,16,16,16],'data_types':['uint16','uint16','uint16','uint16']},
     0x511:{'mapping':[8,8,8,8,8],'data_types':['uint8','uint8','uint8','uint8','uint8']},
     0x18A:{'mapping':[8,8,8,8,32],'data_types':['uint8','uint8','uint8','uint8','float32']},
    }


if __name__=="__main__":
    ppw={0x200:{'data_types':['uint16','uint16','uint16','uint16']},
        0x300:{'data_types':['uint16','uint16','uint16','uint16']},
        }


    dll=load_dll("can_dll.dll") #–ó–∞–≥—Ä—É–∑–∫–∞ DLL

    a = CanWorker(dll,pps,"192.168.7.2",psw="1")
    con=a.connect("192.168.7.2", 2000)
    print(f'Connect to PLC {con}')

    a.callback_func = CALLBACK_FUNC(a.get_pdo)
    a.register_callbac_pdo(a.callback_func)

    a.callback_func_error = CALLBACK_FUNC(a.get_error)
    a.register_callbac_error(a.callback_func_error)

    SDO_w_error=0
    SDO_w_count=0

    SDO_r_error=0
    SDO_r_count=0

    max_count_sdo=5001

    node = 12 # –ù–æ–º–µ—Ä —É–∑–ª–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä—â–∞–µ–º—Å—è
    index = 0x6411 # –ò–Ω–¥–µ–∫—Å SDO –æ–±—ä–µ–∫—Ç–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞)
    subindex = 0x00 # –ü–æ–¥ –∏–Ω–¥–µ–∫—Å SDO –æ–±—ä–µ–∫—Ç–∞ (–Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞)


    if con > 0:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É heartbeat")
        a.Start_heartbeat(500)
        time.sleep(5)
        
        sdo_on=False
        
        
        # –±–ª–æ–∫ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è SDO –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for i1 in range(1,max_count_sdo):

            value_for_write=[i1,i1,i1,i1]
            res,pdo_data = a.packing_pdo(ppw[0x200],value_for_write)
            if not sdo_on:
                a.WritePDO(node_id=12, number_pdo=0x200, pdo_data=pdo_data)
            else:
                for channel in range(1,9):
                    result_SDO=a.WriteSDO(node_id=node, index=index, sub_index=channel, data=i1, data_type='uint16', timeout_ms=200)
                    SDO_w_count+=1
                    if result_SDO<0:
                        SDO_w_error+=1
                    print(f"Result SDO Write channel:{channel} value:{result_SDO}")

                    result_SDO=a.ReadSDO(node_id=node, index=index, sub_index=channel, timeout_ms=200)
                    SDO_r_count+=1
                    if result_SDO<0:
                        SDO_r_error+=1
                    print(f"Result SDO Read channel:{channel} value:{result_SDO}")
            #time.sleep(0.1)
        
        

        # —Å–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 
        print(f"SDO_w_error {SDO_w_error}/{SDO_w_count} SDO_r_error {SDO_r_error}/{SDO_r_count}")

        # –±–ª–æ–∫ —á—Ç–µ–Ω–∏—è PDO
        t1= datetime.datetime.now()
        while True:        
            t2= datetime.datetime.now()
            if (t2 - t1).total_seconds()  < 2000.0:
                time.sleep(0.2)
                continue
            else:
                break
            

        a.Disconnect()
        a.DestroyWorker()

